package be.lacerta.cq2.sim.hbn;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

// Generated 1-jun-2009 23:43:33 by Hibernate Tools 3.2.4.GA

/**
 * MageSkill generated by hbm2java
 */
public class MageSkill extends HbnObject implements java.io.Serializable {

	private Mage mage;
	private Skill skill;

	public MageSkill() {
	}

	public MageSkill(Mage mage, Skill skill) {
		this.mage = mage;
		this.skill = skill;
	}

	public Mage getMage() {
		return this.mage;
	}

	public void setMage(Mage mage) {
		this.mage = mage;
	}

	public Skill getSkill() {
		return this.skill;
	}

	public void setSkill(Skill skill) {
		this.skill = skill;
	}
	
	public static Set<Skill> getSkills(String mage) {
		Set<Skill> skills = new HashSet<Skill>();
		Transaction tx = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			tx = session.getTransaction();
			Criteria c = session.createCriteria(MageSkill.class);
			c.add(Restrictions.eq("mage", Mage.getOrCreateMage(mage)));
			List<MageSkill> result = c.list();
			for (MageSkill ms : result) {
				skills.add(ms.getSkill());
			}

		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null && tx.isActive())
				tx.rollback();
		}
		return skills;
	}
	
	public static List<MageSkill> loadBySkill(Skill skill) {
		List<MageSkill> mages = null;
		Transaction tx = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			tx = session.getTransaction();
			Criteria c = session.createCriteria(MageSkill.class);
			c.add(Restrictions.eq("skill", skill));
			c.addOrder(Order.asc("mage"));
			mages = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null && tx.isActive())
				tx.rollback();
		}
		return mages;
	}
	
	public static MageSkill load(Mage mage, Skill skill) {
		MageSkill ms = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			Criteria c = session.createCriteria(MageSkill.class);
			c.add(Restrictions.eq("mage", mage));
			c.add(Restrictions.eq("skill", skill));
			List<MageSkill> result = c.list();
			if (result != null && result.size() > 0) {
				ms = result.get(0);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
		}
		return ms;
	}
	
	public static MageSkill load(String mage, Skill skill) {
		return load(Mage.getOrCreateMage(mage), skill);
	}
	
}
