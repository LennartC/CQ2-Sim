package be.lacerta.cq2.sim.hbn;

import java.util.List;
import java.util.Set;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;

// Generated 1-jun-2009 23:43:33 by Hibernate Tools 3.2.4.GA

/**
 * Skill generated by hbm2java
 */
public class Skill extends HbnObject implements java.io.Serializable {

	private Integer id;
	private String text;
	private String cq2class;
	private Skill dependency;

	public Skill() {
	}

	public Skill(String text, String cq2class, Skill dependency) {
		this.text = text;
		this.cq2class = cq2class;
		this.dependency = dependency;
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getText() {
		return this.text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public String getCq2class() {
		return this.cq2class;
	}

	public void setCq2class(String cq2class) {
		this.cq2class = cq2class;
	}

	public Skill getDependency() {
		return this.dependency;
	}

	public void setDependency(Skill dependency) {
		this.dependency = dependency;
	}
	
	public static Skill loadByText(String text) {
		Skill skill = null;
		Transaction tx = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			tx = session.getTransaction();
			Criteria c = session.createCriteria(Skill.class);
			c.add(Restrictions.eq("text", text));
			List<Skill> result = c.list();
			if (result != null && result.size() > 0) {
				skill = result.get(0);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null && tx.isActive())
				tx.rollback();
		}
		return skill;
	}
	
	public static String getXMLSkillTree(String mage, String cq2class) {
		String xml ="";
		List<Skill> skills = null;
		Transaction tx = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			tx = session.getTransaction();
			Criteria c = session.createCriteria(Skill.class);
			
			if (cq2class != null && !cq2class.equals("")) {
		        Criterion eqClass = Restrictions.eq("cq2class", cq2class);
		        Criterion isNull = Restrictions.isNull("cq2class");
		        c.add(Restrictions.or(eqClass,isNull));
			}
	        c.add(Restrictions.isNull("dependency"));

	        skills = c.list();
	        
	        Set<Skill> skillsForMage = null;
	        
	        if (mage!=null) {
	        	skillsForMage = MageSkill.getSkills(mage);
	        }
	        
			xml = "<?xml version='1.0' encoding='iso-8859-1'?>";
			xml += "<tree id=\"0\">";
			for (Skill skill : skills) {
				xml += getTree(skill,cq2class,skillsForMage);
			}
			xml += "</tree>";
			
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null && tx.isActive())
				tx.rollback();
		}
		

		return xml;
	}
	
	private static String getTree(Skill skill,String cq2class,Set<Skill> learnedSkills) {
		String r = "<item text=\""+skill.getText()+"\" id=\""+skill.getId()+"\"";
		if (learnedSkills != null && learnedSkills.contains(skill)) r+= " checked=\"1\"";
		r+=">";
		for (Skill dep : skill.getDependant(cq2class)) {
			r+=getTree(dep,cq2class,learnedSkills);
		}
		r += "</item>";
		return r;
	}
	
	@SuppressWarnings("unchecked")
	public List<Skill> getDependant(String cq2class) {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		session.getTransaction();
		Criteria c = session.createCriteria(Skill.class);
		if (cq2class != null && cq2class.length() > 0) {
	        Criterion eqClass = Restrictions.eq("cq2class", cq2class);
	        Criterion isNull = Restrictions.isNull("cq2class");
	        c.add(Restrictions.or(eqClass,isNull));
		}
		c.add(Restrictions.eq("dependency", this));
		return c.list();
	}

}
