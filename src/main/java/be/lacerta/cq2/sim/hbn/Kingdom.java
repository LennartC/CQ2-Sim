package be.lacerta.cq2.sim.hbn;

// Generated 11-jul-2009 17:34:45 by Hibernate Tools 3.2.4.GA

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 * Kingdom generated by hbm2java
 */
public class Kingdom extends HbnObject implements java.io.Serializable {

	private Integer id;
	private String name;
	private Integer level;
	private Date modified;
	private Set<Mage> inhabitants = new HashSet<Mage>(0);

	public Kingdom() {
	}

	public Kingdom(String name, Integer level, Set<Mage> inhabitants) {
		this.name = name;
		this.level = level;
		this.inhabitants = inhabitants;
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getLevel() {
		return this.level;
	}

	public void setLevel(Integer level) {
		this.level = level;
	}

	public Date getModified() {
		return modified;
	}

	public void setModified(Date date) {
		this.modified = date;
	}
	
	public void setModified() {
		this.modified = new Date();
	}
	
	public Set<Mage> getInhabitants() {
		return this.inhabitants;
	}

	public void setInhabitants(Set<Mage> inhabitants) {
		this.inhabitants = inhabitants;
	}
	
	public static Kingdom loadByName(String name) {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		Criteria c = session.createCriteria(Kingdom.class);
		c.add(Restrictions.eq("name", name));
		c.setMaxResults(1);
		return (Kingdom)c.uniqueResult();
	}

	/** custom functions **/
	public void addInhabitant(Mage mage) {
		Kingdom oldKd = mage.getKingdom();
		if (oldKd != null) {
			oldKd.getInhabitants().remove(mage);
			oldKd.saveOrUpdate();
		}
		mage.setKingdom(this);
		getInhabitants().add(mage);
		mage.saveOrUpdate();
	}
	
	public void removeInhabitant(Mage mage) {
		getInhabitants().remove(mage);
		mage.setKingdom(null);
		mage.saveOrUpdate();
	}
	
	public int compareTo(Kingdom kingdom) {
		if (kingdom==null) return -1;
		if (this.getName()==null && kingdom.getName()==null) return 0;
		else if (this.getName()==null) return 1;
		else if (kingdom.getName()==null) return -1;
		else return this.getName().compareTo(kingdom.getName());
	}
	
	public static List<Kingdom> getKingdoms(String ...orders) {
		List<Kingdom> result = null;
		Transaction tx = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			tx = session.getTransaction();
			Criteria c = session.createCriteria(Kingdom.class);
			for (String order: orders) {
				c.addOrder(Order.asc(order));
			}
			result = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null && tx.isActive())
				tx.rollback();
		}
		return result;
	}
	
}
