package be.lacerta.cq2.sim.hbn;

// Generated 2-jun-2009 0:11:27 by Hibernate Tools 3.2.4.GA

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 * Reveal generated by hbm2java
 */
public class Reveal extends HbnObject implements java.io.Serializable {

	private Integer id;
	private Mage mage;
	private String kingdom;
	private Integer level;
	private Integer forestSkill;
	private Integer deathSkill;
	private Integer airSkill;
	private Integer earthSkill;
	private String mageClass;
	private String unparsed;
	private Date time;
	private User user;
	private Set<RevealCrit> creatures = new TreeSet<RevealCrit>();
	private Set<RevealNote> notes = new HashSet<RevealNote>(0);
	private boolean old = false;

	public Reveal() {
		setTime(new Date());
	}

	public Reveal(Mage name, String kingdom, Integer level, Integer forestSkill, Integer deathSkill, 
			Integer airSkill, Integer earthSkill, String mageClass,
			String unparsed, Date time, User user, Set<RevealCrit> creatures,
			Set<RevealNote> notes, boolean old) {
		this.mage = name;
		this.kingdom = kingdom;
		this.level = level;
		this.forestSkill = forestSkill;
		this.airSkill = airSkill;
		this.deathSkill = deathSkill;
		this.earthSkill = earthSkill;
		this.mageClass = mageClass;
		this.unparsed = unparsed;
		this.time = time;
		this.user = user;
		this.creatures = creatures;
		this.notes = notes;
		this.old = old;
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Deprecated
	public String getName() {
		return this.mage.getName();
	}
	
	@Deprecated
	public void setName(String name) {
		this.mage = Mage.getOrCreateMage(name);
	}
	
	public Mage getMage() {
		return mage;
	}

	public void setMage(Mage mage) {
		this.mage = mage;
	}

	public String getKingdom() {
		return this.kingdom;
	}

	public void setKingdom(String kingdom) {
		this.kingdom = kingdom;
	}

	public Integer getLevel() {
		return this.level;
	}

	public void setLevel(Integer level) {
		this.level = level;
	}

	public String getMageClass() {
		return this.mageClass;
	}

	public void setMageClass(String mageClass) {
		this.mageClass = mageClass;
	}

	public String getUnparsed() {
		return this.unparsed;
	}

	public void setUnparsed(String unparsed) {
		this.unparsed = unparsed;
	}

	public Date getTime() {
		return this.time;
	}

	public void setTime(Date time) {
		this.time = time;
	}

	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public Set<RevealCrit> getCreatures() {
		return this.creatures;
	}

	private void setCreatures(Set<RevealCrit> creatures) {
		this.creatures = creatures;
	}

	public Set<RevealNote> getNotes() {
		return this.notes;
	}

	private void setNotes(Set<RevealNote> notes) {
		this.notes = notes;
	}


	public Integer getForestSkill() {
		return forestSkill==null?0:forestSkill;
	}

	public void setForestSkill(Integer forestSkill) {
		this.forestSkill = forestSkill;
	}

	public Integer getDeathSkill() {
		return deathSkill==null?0:deathSkill;
	}

	public void setDeathSkill(Integer deathSkill) {
		this.deathSkill = deathSkill;
	}

	public Integer getAirSkill() {
		return airSkill==null?0:airSkill;
	}

	public void setAirSkill(Integer airSkill) {
		this.airSkill = airSkill;
	}

	public Integer getEarthSkill() {
		return earthSkill==null?0:earthSkill;
	}

	public void setEarthSkill(Integer earthSkill) {
		this.earthSkill = earthSkill;
	}

	public boolean isOld() {
		return old;
	}

	public void setOld(boolean old) {
		this.old = old;
	}
	
	/**
	 * Custom functions
	 */

	public void addCreature(RevealCrit creature) {
		creature.setReveal(this);
		getCreatures().add(creature);
		creature.saveOrUpdate();
	}
	
	public void addNote(RevealNote note) {
		note.setReveal(this);
		getNotes().add(note);
		note.saveOrUpdate();
	}
	
	
	public static List<Reveal> getLatest(int days) {
		List<Reveal> reveals = null;
		Transaction tx = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			tx = session.getTransaction();
			Criteria c = session.createCriteria(Reveal.class);
			c.add(Restrictions.eq("old",false));
			c.add(Restrictions.ge("time", new Date((new Date()).getTime()-(1000*60*60*24*days))));
			c.addOrder(Order.desc("time"));
			reveals = c.list();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null && tx.isActive())
				tx.rollback();
		}
		return reveals;
	}
	
	public static List<Reveal> getAllForMage(String mage) {

		List<Reveal> reveals = null;
		Transaction tx = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			tx = session.getTransaction();
			Criteria c = session.createCriteria(Reveal.class);
			c.add(Restrictions.eq("mage", Mage.getOrCreateMage(mage)));
			c.addOrder(Order.desc("time"));
			reveals = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null && tx.isActive())
				tx.rollback();
		}
		return reveals;
	}
	
	public static List<Reveal> getReveals(String ...orders) {
		List<Reveal> result = null;
		Transaction tx = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			tx = session.getTransaction();
			Criteria c = session.createCriteria(Reveal.class);
			c.add(Restrictions.eq("old",false));
			for (String order: orders) {
				c.addOrder(Order.asc(order));
			}
			result = c.list();

		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null && tx.isActive())
				tx.rollback();
		}
		return result;
	}
	
	public static Reveal getRevealByMage(String mage) {
		Reveal reveal = null;
		Transaction tx = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			tx = session.getTransaction();
			Criteria c = session.createCriteria(Reveal.class);
			c.add(Restrictions.eq("mage", Mage.getOrCreateMage(mage)));
			c.addOrder(Order.desc("time"));
			List<Reveal> results = c.list();
			if (results != null && results.size() > 0) {
				reveal = results.get(0);
			}

		} catch (HibernateException e) {
			e.printStackTrace();
			if (tx != null && tx.isActive())
				tx.rollback();
		}
		return reveal;
	}
}
